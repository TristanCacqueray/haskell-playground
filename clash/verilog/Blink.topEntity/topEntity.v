/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.4.6. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  CLK // clock


      // Outputs
    , output wire [15:0] LED
    );
  wire  c$bindCsr;
  // src/Blink.hs:50:10-12
  wire [0:0] half8;
  // src/Blink.hs:50:10-12
  wire [1:0] half9;
  // src/Blink.hs:50:10-12
  wire [2:0] half10;
  // src/Blink.hs:50:10-12
  wire [3:0] half11;
  // src/Blink.hs:50:10-12
  wire [4:0] half12;
  // src/Blink.hs:50:10-12
  wire [5:0] half13;
  // src/Blink.hs:50:10-12
  wire [6:0] half14;
  // src/Blink.hs:50:10-12
  wire [7:0] half15;
  wire [7:0] c$app_arg;
  // src/Blink.hs:27:1-73
  wire [25:0] y;
  wire [26:0] c$case_alt;
  // src/Blink.hs:27:1-73
  wire [25:0] x;
  wire [26:0] c$case_alt_0;
  wire [26:0] result;
  wire  c$case_scrut;
  wire [0:0] c$app_arg_0;
  wire  result_0;
  // src/Blink.hs:32:10-12
  reg [26:0] r = {1'b1,26'd43700000};
  // src/Blink.hs:27:1-73
  wire [25:0] y_0;
  wire [26:0] c$case_alt_1;
  // src/Blink.hs:27:1-73
  wire [25:0] x_0;
  wire [26:0] c$case_alt_2;
  wire [26:0] result_1;
  wire  c$case_scrut_0;
  wire [0:0] c$app_arg_1;
  wire  result_2;
  // src/Blink.hs:32:10-12
  reg [26:0] r_0 = {1'b1,26'd37500000};
  // src/Blink.hs:27:1-73
  wire [25:0] y_1;
  wire [26:0] c$case_alt_3;
  // src/Blink.hs:27:1-73
  wire [25:0] x_1;
  wire [26:0] c$case_alt_4;
  wire [26:0] result_3;
  wire  c$case_scrut_1;
  wire [0:0] c$app_arg_2;
  wire  result_4;
  // src/Blink.hs:32:10-12
  reg [26:0] r_1 = {1'b1,26'd31200000};
  // src/Blink.hs:27:1-73
  wire [25:0] y_2;
  wire [26:0] c$case_alt_5;
  // src/Blink.hs:27:1-73
  wire [25:0] x_2;
  wire [26:0] c$case_alt_6;
  wire [26:0] result_5;
  wire  c$case_scrut_2;
  wire [0:0] c$app_arg_3;
  wire  result_6;
  // src/Blink.hs:32:10-12
  reg [26:0] r_2 = {1'b1,26'd25000000};
  // src/Blink.hs:27:1-73
  wire [25:0] y_3;
  wire [26:0] c$case_alt_7;
  // src/Blink.hs:27:1-73
  wire [25:0] x_3;
  wire [26:0] c$case_alt_8;
  wire [26:0] result_7;
  wire  c$case_scrut_3;
  wire [0:0] c$app_arg_4;
  wire  result_8;
  // src/Blink.hs:32:10-12
  reg [26:0] r_3 = {1'b1,26'd18700000};
  // src/Blink.hs:27:1-73
  wire [25:0] y_4;
  wire [26:0] c$case_alt_9;
  // src/Blink.hs:27:1-73
  wire [25:0] x_4;
  wire [26:0] c$case_alt_10;
  wire [26:0] result_9;
  wire  c$case_scrut_4;
  wire [0:0] c$app_arg_5;
  wire  result_10;
  // src/Blink.hs:32:10-12
  reg [26:0] r_4 = {1'b1,26'd12500000};
  // src/Blink.hs:27:1-73
  wire [25:0] y_5;
  wire [26:0] c$case_alt_11;
  // src/Blink.hs:27:1-73
  wire [25:0] x_5;
  wire [26:0] c$case_alt_12;
  wire [26:0] result_11;
  wire  c$case_scrut_5;
  wire [0:0] c$app_arg_6;
  wire  result_12;
  // src/Blink.hs:32:10-12
  reg [26:0] r_5 = {1'b1,26'd6200000};
  // src/Blink.hs:27:1-73
  wire [25:0] y_6;
  wire [26:0] c$case_alt_13;
  // src/Blink.hs:27:1-73
  wire [25:0] x_6;
  wire [26:0] c$case_alt_14;
  wire [26:0] result_13;
  wire  c$case_scrut_6;
  wire [0:0] c$app_arg_7;
  wire  result_14;
  // src/Blink.hs:32:10-12
  reg [26:0] r_6 = {1'b1,26'd0};

  // resetGen on
  // pragma translate_off

  reg  rst;
  localparam reset_period = 30001 + ((1 - 1) * 100000);
  initial begin
    #1     rst =  1 ;
    #reset_period rst =  0 ;
  end
  assign c$bindCsr = rst;
  // pragma translate_on
  // resetGen end

  assign half8 = result_0;

  assign half9 = {result_2,   half8};

  assign half10 = {result_4,   half9};

  assign half11 = {result_6,   half10};

  assign half12 = {result_8,   half11};

  assign half13 = {result_10,   half12};

  assign half14 = {result_12,   half13};

  assign half15 = {result_14,   half14};

  assign LED = {half15,c$app_arg};

  // reverse begin
  genvar i;
  generate
  for (i = 0; i < 8; i = i + 1) begin : reverse
    assign c$app_arg[(8 - 1 - i)*1+:1] = half15[i*1+:1];
  end
  endgenerate
  // reverse end

  assign y = r[25:0];

  assign c$case_alt = (y == 26'd49999999) ? {1'b0,26'd0} : {1'b1,y + 26'd1};

  assign x = r[25:0];

  assign c$case_alt_0 = (x == 26'd49999999) ? {1'b1,26'd0} : {1'b0,x + 26'd1};

  assign result = r[26:26] ? c$case_alt : c$case_alt_0;

  assign c$case_scrut = r[26:26] ? 1'b0 : 1'b1;

  assign c$app_arg_0 = c$case_scrut ? 1'b1 : 1'b0;

  assign result_0 = c$app_arg_0;

  // register begin
  always @(posedge CLK or  posedge  c$bindCsr) begin : r_register
    if ( c$bindCsr) begin
      r <= {1'b1,26'd43700000};
    end else begin
      r <= result;
    end
  end
  // register end

  assign y_0 = r_0[25:0];

  assign c$case_alt_1 = (y_0 == 26'd49999999) ? {1'b0,26'd0} : {1'b1,y_0 + 26'd1};

  assign x_0 = r_0[25:0];

  assign c$case_alt_2 = (x_0 == 26'd49999999) ? {1'b1,26'd0} : {1'b0,x_0 + 26'd1};

  assign result_1 = r_0[26:26] ? c$case_alt_1 : c$case_alt_2;

  assign c$case_scrut_0 = r_0[26:26] ? 1'b0 : 1'b1;

  assign c$app_arg_1 = c$case_scrut_0 ? 1'b1 : 1'b0;

  assign result_2 = c$app_arg_1;

  // register begin
  always @(posedge CLK or  posedge  c$bindCsr) begin : r_0_register
    if ( c$bindCsr) begin
      r_0 <= {1'b1,26'd37500000};
    end else begin
      r_0 <= result_1;
    end
  end
  // register end

  assign y_1 = r_1[25:0];

  assign c$case_alt_3 = (y_1 == 26'd49999999) ? {1'b0,26'd0} : {1'b1,y_1 + 26'd1};

  assign x_1 = r_1[25:0];

  assign c$case_alt_4 = (x_1 == 26'd49999999) ? {1'b1,26'd0} : {1'b0,x_1 + 26'd1};

  assign result_3 = r_1[26:26] ? c$case_alt_3 : c$case_alt_4;

  assign c$case_scrut_1 = r_1[26:26] ? 1'b0 : 1'b1;

  assign c$app_arg_2 = c$case_scrut_1 ? 1'b1 : 1'b0;

  assign result_4 = c$app_arg_2;

  // register begin
  always @(posedge CLK or  posedge  c$bindCsr) begin : r_1_register
    if ( c$bindCsr) begin
      r_1 <= {1'b1,26'd31200000};
    end else begin
      r_1 <= result_3;
    end
  end
  // register end

  assign y_2 = r_2[25:0];

  assign c$case_alt_5 = (y_2 == 26'd49999999) ? {1'b0,26'd0} : {1'b1,y_2 + 26'd1};

  assign x_2 = r_2[25:0];

  assign c$case_alt_6 = (x_2 == 26'd49999999) ? {1'b1,26'd0} : {1'b0,x_2 + 26'd1};

  assign result_5 = r_2[26:26] ? c$case_alt_5 : c$case_alt_6;

  assign c$case_scrut_2 = r_2[26:26] ? 1'b0 : 1'b1;

  assign c$app_arg_3 = c$case_scrut_2 ? 1'b1 : 1'b0;

  assign result_6 = c$app_arg_3;

  // register begin
  always @(posedge CLK or  posedge  c$bindCsr) begin : r_2_register
    if ( c$bindCsr) begin
      r_2 <= {1'b1,26'd25000000};
    end else begin
      r_2 <= result_5;
    end
  end
  // register end

  assign y_3 = r_3[25:0];

  assign c$case_alt_7 = (y_3 == 26'd49999999) ? {1'b0,26'd0} : {1'b1,y_3 + 26'd1};

  assign x_3 = r_3[25:0];

  assign c$case_alt_8 = (x_3 == 26'd49999999) ? {1'b1,26'd0} : {1'b0,x_3 + 26'd1};

  assign result_7 = r_3[26:26] ? c$case_alt_7 : c$case_alt_8;

  assign c$case_scrut_3 = r_3[26:26] ? 1'b0 : 1'b1;

  assign c$app_arg_4 = c$case_scrut_3 ? 1'b1 : 1'b0;

  assign result_8 = c$app_arg_4;

  // register begin
  always @(posedge CLK or  posedge  c$bindCsr) begin : r_3_register
    if ( c$bindCsr) begin
      r_3 <= {1'b1,26'd18700000};
    end else begin
      r_3 <= result_7;
    end
  end
  // register end

  assign y_4 = r_4[25:0];

  assign c$case_alt_9 = (y_4 == 26'd49999999) ? {1'b0,26'd0} : {1'b1,y_4 + 26'd1};

  assign x_4 = r_4[25:0];

  assign c$case_alt_10 = (x_4 == 26'd49999999) ? {1'b1,26'd0} : {1'b0,x_4 + 26'd1};

  assign result_9 = r_4[26:26] ? c$case_alt_9 : c$case_alt_10;

  assign c$case_scrut_4 = r_4[26:26] ? 1'b0 : 1'b1;

  assign c$app_arg_5 = c$case_scrut_4 ? 1'b1 : 1'b0;

  assign result_10 = c$app_arg_5;

  // register begin
  always @(posedge CLK or  posedge  c$bindCsr) begin : r_4_register
    if ( c$bindCsr) begin
      r_4 <= {1'b1,26'd12500000};
    end else begin
      r_4 <= result_9;
    end
  end
  // register end

  assign y_5 = r_5[25:0];

  assign c$case_alt_11 = (y_5 == 26'd49999999) ? {1'b0,26'd0} : {1'b1,y_5 + 26'd1};

  assign x_5 = r_5[25:0];

  assign c$case_alt_12 = (x_5 == 26'd49999999) ? {1'b1,26'd0} : {1'b0,x_5 + 26'd1};

  assign result_11 = r_5[26:26] ? c$case_alt_11 : c$case_alt_12;

  assign c$case_scrut_5 = r_5[26:26] ? 1'b0 : 1'b1;

  assign c$app_arg_6 = c$case_scrut_5 ? 1'b1 : 1'b0;

  assign result_12 = c$app_arg_6;

  // register begin
  always @(posedge CLK or  posedge  c$bindCsr) begin : r_5_register
    if ( c$bindCsr) begin
      r_5 <= {1'b1,26'd6200000};
    end else begin
      r_5 <= result_11;
    end
  end
  // register end

  assign y_6 = r_6[25:0];

  assign c$case_alt_13 = (y_6 == 26'd49999999) ? {1'b0,26'd0} : {1'b1,y_6 + 26'd1};

  assign x_6 = r_6[25:0];

  assign c$case_alt_14 = (x_6 == 26'd49999999) ? {1'b1,26'd0} : {1'b0,x_6 + 26'd1};

  assign result_13 = r_6[26:26] ? c$case_alt_13 : c$case_alt_14;

  assign c$case_scrut_6 = r_6[26:26] ? 1'b0 : 1'b1;

  assign c$app_arg_7 = c$case_scrut_6 ? 1'b1 : 1'b0;

  assign result_14 = c$app_arg_7;

  // register begin
  always @(posedge CLK or  posedge  c$bindCsr) begin : r_6_register
    if ( c$bindCsr) begin
      r_6 <= {1'b1,26'd0};
    end else begin
      r_6 <= result_13;
    end
  end
  // register end


endmodule

