/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.4.6. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input [3:0] SWITCHES


      // Outputs
    , output wire [3:0] SS_AN
    , output wire [6:0] SS_SEG
    , output wire  SS_DP
    );
  wire [6:0] c$app_arg;
  reg [6:0] c$app_arg_0;
  wire [6:0] result;
  wire [3:0] c$app_arg_1;
  wire [3:0] c$app_arg_selection_res;
  wire [6:0] c$vec;
  wire [3:0] SS__dc_arg_res;
  wire [3:0] c$vec_0;
  wire [11:0] SS;

  // map begin
  genvar i;
  generate
  for (i=0; i < 7; i = i + 1) begin : map
    wire  map_in;
    assign map_in = result[i*1+:1];
    wire  map_out;
    wire [0:0] c$app_arg_2;
    wire  result_0;
    assign map_out = result_0;

    assign c$app_arg_2 = map_in ? 1'b1 : 1'b0;

    assign result_0 = ~ (c$app_arg_2);


    assign c$app_arg[i*1+:1] = map_out;
  end
  endgenerate
  // map end

  assign c$app_arg_selection_res = (c$app_arg_1);

  always @(*) begin
    case(c$app_arg_selection_res)
      4'd0 : c$app_arg_0 = 7'b1111110;
      4'd1 : c$app_arg_0 = 7'b0110000;
      4'd2 : c$app_arg_0 = 7'b1101101;
      4'd3 : c$app_arg_0 = 7'b1111001;
      4'd4 : c$app_arg_0 = 7'b0110011;
      4'd5 : c$app_arg_0 = 7'b1011011;
      4'd6 : c$app_arg_0 = 7'b1011111;
      4'd7 : c$app_arg_0 = 7'b1110000;
      4'd8 : c$app_arg_0 = 7'b1111111;
      4'd9 : c$app_arg_0 = 7'b1111011;
      4'd10 : c$app_arg_0 = 7'b1110111;
      4'd11 : c$app_arg_0 = 7'b0011111;
      4'd12 : c$app_arg_0 = 7'b1001110;
      4'd13 : c$app_arg_0 = 7'b0111101;
      4'd14 : c$app_arg_0 = 7'b1001111;
      4'd15 : c$app_arg_0 = 7'b1000111;
      default : c$app_arg_0 = {7 {1'bx}};
    endcase
  end

  assign c$vec = (c$app_arg_0);

  // map begin
  genvar i_0;
  generate
  for (i_0=0; i_0 < 7; i_0 = i_0 + 1) begin : map_0
    wire [0:0] map_in_0;
    assign map_in_0 = c$vec[i_0*1+:1];
    wire  map_out_0;
    assign map_out_0 = map_in_0 == 1'b1;


    assign result[i_0*1+:1] = map_out_0;
  end
  endgenerate
  // map end

  // map begin
  genvar i_1;
  generate
  for (i_1=0; i_1 < 4; i_1 = i_1 + 1) begin : map_1
    wire  map_in_1;
    assign map_in_1 = SWITCHES[i_1*1+:1];
    wire [0:0] map_out_1;
    assign map_out_1 = map_in_1;


    assign c$app_arg_1[i_1*1+:1] = map_out_1;
  end
  endgenerate
  // map end

  assign c$vec_0 = {1'b0,   1'b0,   1'b0,   1'b1};

  // map begin
  genvar i_2;
  generate
  for (i_2=0; i_2 < 4; i_2 = i_2 + 1) begin : map_2
    wire  map_in_2;
    assign map_in_2 = c$vec_0[i_2*1+:1];
    wire  map_out_2;
    wire [0:0] c$app_arg_3;
    wire  result_1;
    assign map_out_2 = result_1;

    assign c$app_arg_3 = map_in_2 ? 1'b1 : 1'b0;

    assign result_1 = c$app_arg_3;


    assign SS__dc_arg_res[i_2*1+:1] = map_out_2;
  end
  endgenerate
  // map end

  assign SS = {SS__dc_arg_res,   c$app_arg,
               1'b1};

  assign SS_AN = SS[11:8];

  assign SS_SEG = SS[7:1];

  assign SS_DP = SS[0:0];


endmodule

